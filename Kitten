package kitten;

// In this class, the instance variables are initialized and the move method is implemented to return the integer value of the new square
// that the kitten moved to

class Kitten {
    
	// declare private instance variables
    private int numRows, numCols;
    private int currRow, currCol;

    public Kitten(int numRows, int numCols, int row, int col) {
    // initialize the instance variables with the arguments passed
    	this.numRows = numRows;
    	this.numCols = numCols;
    	this.currRow = row;
    	this.currCol = col;
        
    }
    
    /* In this method, kittens move in a random direction (left, right, up, or down) by 1 square. 
     * This method returns the integer value of the new square using the formula, currRow*numCols + numCols
     * This method also checks to make sure that kittens do not go out of the boundary specified
     * For example- A 3x3 box containing the following squares,
     * 0 1 2
     * 3 4 5
     * 6 7 8
     * A kitten in square 0 can only move right or down (not up or left). 
     * A kitten in square 7 can only move left, right, or up (not down)
     * However, the kitten in square 4 can move in all 4 directions (up, down, left, right)
     */
    public int move() {
    		
    	// check the 4 edges of the numRows * numCols KittenBox to prevent
    	// going out of the boundaries. 
    	
    	
    	// if the kitten is in the top left edge square then 
    	// generate an integer 0 or 1 randomly (as there are only 2 places)
    	// this kitten can move and then use conditional statements to 
    	// move the kitten according to the result of calling random function
    	
    	if(currRow == 0 && currCol==0)
    	{
    		int randNum = (int) (Math.random()*2);
    		// move to the right by 1 if randNum is 0 and move down by 1 if it is 1
    		if(randNum == 0)
    		{
    			currCol++;
    		}
    		else {
    			currRow++;
    		}
    	}
    	// this prevents going out of boundary for top right edge square
    	else if(currRow == 0 && currCol==numCols-1)
    	{
    		int randNum = (int) (Math.random()*2);
    		// move to the left by 1 if randNum is 0 and move down by 1 if it is 1
    		if(randNum == 0)
    		{
    			currCol--;
    		}
    		else {
    			currRow++;
    		}
    	}
    	// this prevents going out of boundary for bottom left edge square
    	else if(currRow == numRows-1 && currCol==0)
    	{
    		int randNum = (int) (Math.random()*2);
    		// move to the right by 1 if randNum is 0 and move up by 1 if it is 1
    		if(randNum == 0)
    		{
    			currCol++;
    		}
    		else {
    			currRow--;
    		}
    	}
    		// this prevents going out of boundary for bottom right edge square
        	else if(currRow == numRows-1 && currCol==numCols-1)
        	{
        		int randNum = (int) (Math.random()*2);
        		// move to the left by 1 if randNum is 0 and move up by 1 if it is 1
        		if(randNum == 0)
        		{
        			currCol--;
        		}
        		else {
        			currRow--;
        		}
    	}
    	
    	// For the series of rows and columns at the edge, there are 3 ways
    	// for the kittens to move (only 2 for the corners but that is already
    	// checked by the conditionals above)
    	
    	
    	// this conditional checks for the topmost row
        	else if(currRow == 0)
    	{
    		// generate a random num either 0, 1, or 2
    		int randNum = (int) (Math.random()*3);
    		if(randNum==0)
    		{
    			currCol++;
    		}
    		else if(randNum == 1)
    		{
    			currCol--;
    		}
    		else {
    			currRow++;
    		}
    	}
    	// this conditional checks for the row at the very bottom
    	else if(currRow == numRows-1)
    	{
    		// generate a random num either 0, 1, or 2
    		int randNum = (int) (Math.random()*3);
    		if(randNum==0)
    		{
    			currCol++;
    		}
    		else if(randNum == 1)
    		{
    			currCol--;
    		}
    		else {
    			currRow--;
    		}
    	}

    	// this conditional checks for the very first column
    	else if(currCol == 0)
    	{
    		// generate a random num either 0, 1, or 2
    		int randNum = (int) (Math.random()*3);
    		if(randNum==0)
    		{
    			currRow++;
    		}
    		else if(randNum == 1)
    		{
    			currRow--;
    		}
    		else {
    			currCol++;
    		}
    	}
    	
    	// this conditional checks for the very last column
    	else if(currCol == numCols-1)
    	{
    		// generate a random num either 0, 1, or 2
    		int randNum = (int) (Math.random()*3);
    		if(randNum==0)
    		{
    			currRow++;
    		}
    		else if(randNum == 1)
    		{
    			currRow--;
    		}
    		else {
    			currCol--;
    		}
    	}
    	
    	else {
    		// if the kitten is in a square where there are other squares in all 4
    		// directions then generate a random number between 0 and 3 inclusive
    		// and move the kittens accordingly to all 4 directions(up,down,left,right)
    		
    		int direction = (int) (Math.random()*4);
    		if(direction==0)
    		{
    			currRow--;
    		}
    		else if(direction == 1)
    		{
    			currRow++;
    		}
    		else if(direction == 2)
    		{
    			currCol--;
    		}
    		else if(direction == 3) {
    			currCol++;
    		}
    	}

    	// return the kitten's new square location as a single integer with the given formula
        return currRow * numCols + currCol;
    }
}
